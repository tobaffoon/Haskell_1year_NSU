import Data.Ratio 
arc' :: Double -> Double -> Double -> Double
arc'' :: Double -> Integer -> Double -> Double
arc' x eps n = sol where                        --Функция на вычисление с точностью: x - аргумент, eps - точность, n - счётчик
  xn = (x**n) / n                               --Новая перемнная - настоящий член последовательности
  sol | abs(xn - x**(n-2)/(n-2)) < eps = xn     --Если в сравнении с предыдущим разница меньше точности, то возвращаем настоящий член
      | otherwise = xn - arc' x eps (n+2)       --Если нет, то настоящий + следующие члены со знаком минус (для каждого второго, начиная с 5-ой степени, -*- = +)
arc'' x n pwr  = sol where                      --Фунцкия на вычисление n элементов: x - аргумент, n - счётчик, pwr - текущая степень
   xn = (x**pwr) / pwr                          --Новая перемнная - настоящий член последовательности
   sol | n==1 = xn                             
       | otherwise = xn - arc'' x (n-1) (pwr+2) --Считаем счётчик, увеличиваем степень
arcE x eps = arc' x eps 1                       --Начинаем со степени 1
arcN x n = arc'' x n 1.0                        --Начинаем со степени 1
--Не работает для чисел больше 1